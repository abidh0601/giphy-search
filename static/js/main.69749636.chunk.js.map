{"version":3,"sources":["components/GifCard.js","components/SearchField.js","App.js","serviceWorker.js","index.js"],"names":["GifCard","console","log","this","props","gifurl","src","title","id","Component","SearchField","state","query","handleChange","bind","handleSearch","parseSearch","handleRandom","search","q","replace","setState","e","inputValue","target","value","getData","onClick","type","name","onChange","APIKey","App","appdata","completeUrl","result","axios","get","data","push","rows","map","gif","embed_url","key","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2SAceA,E,uKARP,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,QAEnB,6BACI,4BAAQC,IAAKH,KAAKC,MAAMC,OAAQE,MAAOJ,KAAKC,MAAMI,U,GAN5CC,aCkDPC,E,kDAhDX,aAAc,IAAD,8BACT,gBAEKC,MAAQ,CACXC,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,aAAc,EAAKA,aAAaH,KAAlB,gBAVV,E,wDAaDI,GACR,IAAIC,EAAID,EAAOE,QAAQ,IAAK,KAE5BjB,KAAKkB,SAAS,CAACT,MAAOO,M,mCAIbG,GACT,IAAMC,EAAaD,EAAEE,OAAOC,MAC5BtB,KAAKkB,SAAS,CAACT,MAAOW,M,qCAItBpB,KAAKa,YAAYb,KAAKQ,MAAMC,OAC5BT,KAAKC,MAAMsB,QAAQ,SAAUvB,KAAKQ,MAAMC,S,mCAG/BU,GACTnB,KAAKC,MAAMsB,QAAQJ,EAAEE,OAAOC,S,+BAK5B,OACI,6BACI,4BAAQE,QAASxB,KAAKc,aAAcQ,MAAM,YAA1C,YACA,4BAAQE,QAASxB,KAAKc,aAAcQ,MAAM,UAA1C,UACA,2BAAOG,KAAK,OAAOC,KAAK,QAAQC,SAAU3B,KAAKU,aAAcY,MAAOtB,KAAKQ,MAAMC,QAC/E,4BAAQe,QAASxB,KAAKY,cAAtB,e,GA1CUN,aCGpBsB,EAAS,2CAsEAC,E,kDAlEb,aAAc,IAAD,8BACX,gBAEKrB,MAAQ,CACXsB,QAAS,IAGX,EAAKP,QAAU,EAAKA,QAAQZ,KAAb,gBACf,EAAKE,YAAY,EAAKU,QAAQZ,KAAb,gBARN,E,6FAWCc,EAAMV,G,4EACdgB,EAfI,iCAkBNA,GADU,WAATN,EACc,YAAcV,EAAS,IAAKa,EAI5BH,EAAO,IAAKG,E,SAKvBI,EAAQ,GACD,WAARP,E,6BACDO,E,SAAmBC,IAAMC,IAAIH,G,mBAAcI,KAAKA,K,KAAzCC,K,yDAGUH,IAAMC,IAAIH,G,QAA3BC,E,OAAyCG,KAAKA,K,QAEhDnC,KAAKkB,SAAS,CAACY,QAASE,I,+MAY1BhC,KAAKuB,QAAQ,c,+BAKb,IAAMc,EAAK,GAOX,OALArC,KAAKQ,MAAMsB,QAAQQ,KAAI,SAAAC,GAAG,OACxBF,EAAKD,KAAK,kBAAC,EAAD,CAASlC,OAAQqC,EAAIC,UAAWpC,MAAOmC,EAAInC,MAAOC,GAAIkC,EAAIlC,GAAIoC,IAAKF,EAAIlC,SAKjF,yBAAKqC,UAAU,OACb,kBAAC,EAAD,CAAanB,QAASvB,KAAKuB,UAC1Bc,O,GA3DS/B,aCGEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9D,QAAQ8D,MAAMA,EAAMC,c","file":"static/js/main.69749636.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass GifCard extends Component{\r\n\r\n    render(){\r\n        console.log(this.props.gifurl)\r\n        return(\r\n            <div>\r\n                <iframe src={this.props.gifurl} title={this.props.id}/>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default GifCard;","import React, {Component} from 'react';\r\n\r\n\r\nclass SearchField extends Component{\r\n    constructor(){\r\n        super();\r\n    \r\n        this.state = {\r\n          query: \"\",\r\n        }\r\n    \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.parseSearch = this.parseSearch.bind(this);\r\n        this.handleRandom= this.handleRandom.bind(this);\r\n      }\r\n\r\n    parseSearch(search){\r\n        let q = search.replace(\" \", \"+\");\r\n\r\n        this.setState({query: q});\r\n    \r\n    }\r\n\r\n    handleChange(e){\r\n        const inputValue = e.target.value;\r\n        this.setState({query: inputValue});\r\n    }\r\n\r\n    handleSearch(){\r\n        this.parseSearch(this.state.query);\r\n        this.props.getData(\"search\", this.state.query)\r\n    }\r\n\r\n    handleRandom(e){\r\n        this.props.getData(e.target.value);\r\n    }\r\n\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <button onClick={this.handleRandom} value=\"trending\">Trending</button>\r\n                <button onClick={this.handleRandom} value=\"random\">Random</button>\r\n                <input type=\"text\" name=\"field\" onChange={this.handleChange} value={this.state.query}/>\r\n                <button onClick={this.handleSearch}>Search</button>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SearchField;","import React, {Component} from 'react';\nimport axios from 'axios';\n\nimport GifCard from './components/GifCard';\nimport SearchField from './components/SearchField';\n\nconst APIKey = \"api_key=MPa4Wdu4W5XkuFjvNJRxSjCSKiX3lNN6\";\nconst url = \" http://api.giphy.com/v1/gifs/\";\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      appdata: [],\n    }\n\n    this.getData = this.getData.bind(this);\n    this.parseSearch=this.getData.bind(this);\n  }\n\n  async getData(type, search){\n    let completeUrl = url;\n    \n    if(type === \"search\"){\n      completeUrl += \"search?q=\" + search + \"&\" +APIKey;\n    }\n\n    else {\n      completeUrl += type + \"?\"+ APIKey;\n    }\n\n\n    try{\n      let result =[];\n      if(type ===\"random\"){\n        result.push((await axios.get(completeUrl)).data.data);\n      }\n      else{\n        result =  (await axios.get(completeUrl)).data.data;\n      }\n      this.setState({appdata: result});\n\n    }\n    catch(error){\n      \n    }\n    \n\n  }\n\n  \n  componentDidMount(){\n    this.getData(\"trending\")\n  }\n\n  render(){\n\n    const rows=[];\n\n    this.state.appdata.map(gif =>\n      rows.push(<GifCard gifurl={gif.embed_url} title={gif.title} id={gif.id} key={gif.id}/>)\n\n    )\n    \n    return(\n      <div className=\"App\">\n        <SearchField getData={this.getData}/>\n        {rows}\n      </div>\n    );\n  }\n\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}